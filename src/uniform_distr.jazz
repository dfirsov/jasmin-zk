require "bn_generic.jazz"

// sample uniformly at random an element from interval [0..byte_z]
inline fn rsample(stack u64[nlimbs] byte_z) -> (inline int, stack u64[nlimbs])
{
  stack u64[nlimbs] byte_q byte_p;
  reg bool cf;
  inline int i;

  i = 0;
  byte_p = bn_set0(byte_p);

  _, cf, _, _, _, _ = #set0();
  while (!cf) {
    byte_p = #randombytes(byte_p);
    byte_q = bn_copy(byte_p);
    cf, byte_q = bn_subc(byte_q, byte_z);
    i = i + 1;
  }

  return (i, byte_p);
}


export fn __rsample(reg u64 zp rp) 
{ 
  stack u64[nlimbs] r z;

  rp = rp;

  z = bn_load(zp);
  r = rsample(z);
  bn_store(rp, r);
}

