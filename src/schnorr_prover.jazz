require "uniform_distr.jazz"
require "ring_ops.jazz"


inline fn commitment(stack u64[dnlimbs] barrett_parameter, stack u64[nlimbs] group_generator) 
 -> (stack u64[nlimbs]){

  stack u64[nlimbs] random_power commitment;
  _, random_power = rsample(group_generator);
  commitment = expm(barrett_parameter,group_generator,group_generator,random_power);  
  return commitment;
}


inline fn response(stack u64[dnlimbs] barrett_parameter, stack u64[nlimbs] group_generator random_power challenge witness) 
 -> (stack u64[nlimbs]){

  stack u64[nlimbs] response product;
  product = mulm(barrett_parameter,group_generator, challenge,witness);
  response = addm(group_generator, random_power, product);
 
  return response;
}


export fn __commitment(reg u64 commitment_p barrett_parameter_p group_generator_p) 
{ 
  reg u64 commitment_p2;
  stack u64[nlimbs] commitment group_generator;
  stack u64[dnlimbs] barrett_parameter;

  barrett_parameter = dbn_load(barrett_parameter_p);
  group_generator   = bn_load(group_generator_p);
  // relax ABI contraints

  commitment_p2 = commitment_p;
  commitment = commitment(barrett_parameter,group_generator);
  bn_store(commitment_p2, commitment);
}



export fn __response(reg u64 barrett_parameter_p group_generator_p random_power_p challenge_p witness_p) 
{ 
  reg u64 response_p2;
  stack u64[nlimbs] commitment group_generator;
  stack u64[dnlimbs] barrett_parameter;

  barrett_parameter = dbn_load(barrett_parameter_p);
  group_generator = bn_load(group_generator_p);
  random_power = bn_load(random_power_p);
  challenge = bn_load(challenge_p);
  witness = bn_load(witness_p);

  // relax ABI contraints
  response_p2 = response_p;
  response = response(barrett_parameter,group_generator,random_power,challenge,witness);
  bn_store(response_p2, commitment);
}
