require "bn_generic.jazz"
require "uniform_distr.jazz"


inline fn ith_bit64(reg u64 k, reg u64 ctr) -> reg u64 {
  reg u64 p bit;
  bit =  k;
  p = ctr;
  p &= 63;
  bit = bit >> p;
  bit &= 1;
  return bit;
}


inline fn ith_bit(reg ptr u64[nlimbs] kk, reg u64 ctr) -> reg u64
{
  reg u64 p bit r c1 c2 ctr2 ctr3;
  ctr2 = ctr;
  ctr3 =  ctr;
  c1 = ctr2 >> 6;
  c2 = ctr3 & 63;
  r = kk[(int) c1 ];
  bit = ith_bit64(r,c2);  
  return bit;
}


inline fn swapr(reg ptr u64[nlimbs] x, reg ptr u64[nlimbs] y, reg u64 swap) -> (reg ptr u64[nlimbs] , reg ptr u64[nlimbs]) {
  reg u64  mask, tmp1, tmp2;
  inline int i;

  mask = swap * 0xffffffffffffffff;

  for i = 0 to nlimbs {
   tmp1   = x[i];
   tmp1  ^= y[i];
   tmp1  &= mask;
   x[i]  ^= tmp1;
   tmp2   = y[i];
   tmp2  ^= tmp1;
   y[i] = tmp2;

  }
  return x, y;
}



inline fn cminusP (stack u64[nlimbs] p x) 
 -> stack u64[nlimbs]
{
  stack u64[nlimbs] z;
  reg bool cf;
  inline int i;

  z = bn_copy(x);
  cf, z = bn_subc(z, p);
  x = bn_cmov(cf, x, z);
  return x;
}


inline fn dcminusP (stack u64[dnlimbs] p x) 
 -> stack u64[dnlimbs]
{
  stack u64[dnlimbs] z;
  reg bool cf;
  inline int i;

  z = dbn_copy(x);
  cf, z = dbn_subc(z, p);
  x = dbn_cmov(cf, z, x);
  return x;
}


/*  Modular addition  */
inline fn addm(stack u64[nlimbs] p a b) 
 -> stack u64[nlimbs]
{  
  _, a = bn_addc (a,b);
  a = cminusP (p,a);
  return a;
}


inline fn bn_expand(stack u64[nlimbs] x) 
 -> (stack u64[dnlimbs])
{
  stack u64[dnlimbs] r;
  inline int i;

  for i = 0 to nlimbs{
    r[i] = x[i];
  }  
  for i = nlimbs to dnlimbs{
    r[i] = 0;
  }  
  return r;
}

inline fn bn_shrink(stack u64[dnlimbs] x) 
 -> (stack u64[nlimbs])
{
  stack u64[nlimbs] r;
  inline int i;

  for i = 0 to nlimbs{
    r[i] = x[i];
  }  
  return r;
}


inline fn div2(stack u64[2*dnlimbs] x, inline int k) 
 -> (stack u64[dnlimbs])
{
  stack u64[dnlimbs] r;
  inline int i;

  for i = 0 to k{
   r[i] = x[(int)dnlimbs + i];
  }
  return r;
}



inline fn bn_breduce(stack u64[2*nlimbs] a r, stack u64[nlimbs] p) 
 -> (stack u64[nlimbs])
{
  inline int i;
  stack u64[nlimbs] xrfd res;
  stack u64[dnlimbs] xrf xrfn t pp;
  stack u64[2*dnlimbs] xr;

  xr = dbn_muln(a,r);
  xrf = div2(xr, 2 * nlimbs);
  xrfd = bn_shrink(xrf);
  xrfn = bn_muln(xrfd,p);
  t = dbn_subc(a, xrfn);
  pp = bn_expand(p);
  t = dcminusP(pp, t);
  res = bn_shrink(t);

  return res;
}


inline fn mulm(stack u64[dnlimbs] r, stack u64[nlimbs] p a b) 
 -> stack u64[nlimbs]
{
  stack u64[2*nlimbs] c;
  reg bool _of _cf;

  _of, _cf, c = bn_muln (a,b);
  a = bn_breduce(c,r,p);
  return a;
}



inline fn expm(stack u64[dnlimbs] r, stack u64[nlimbs] m x n) 
 -> (stack u64[nlimbs])
{
  reg u64 ctr bit d p par t1 t2 cbit lbit q mask;
  inline int i;
  stack u64[nlimbs] x1 x2 x3 x4;

  ctr = nlimbs * 64 - 1;
  x1 = bn_set1(x1);
  x2 = bn_set1(x2);
  d  = ith_bit(n,ctr);
  x3 = bn_copy(x);
  x4 = mulm(r,m,x,x3);
   p = d;
  (x1,x3) = swapr(x1,x3,d);
  (x2,x4) = swapr(x2,x4,d);

  while(ctr > 0){
    lbit = ctr;
    ctr = ctr - 1;
    t1 =  ith_bit(n,lbit);
    t2 =  ith_bit(n,ctr);
    p = d; 
    d = d | t2;
    par = t1 ^ t2;
    (x1,x2) = swapr(x1,x2,par);
    x1 = mulm(r,m,x1,x2);
    x2 = mulm(r,m,x2,x2);
    q = d;
    cbit = q ^ p;
    (x1,x3) = swapr(x1,x3,cbit);
    (x2,x4) = swapr(x2,x4,cbit);
  }
  
   p = ith_bit(n,0);
   (x1,x2) = swapr(x2,x1,p);
  
  return x1;
}



export fn __expm(reg u64 rp rr pp ap bp) 
{ 
  reg u64 rp2;
  stack u64[nlimbs] a b c p;
  stack u64[dnlimbs] r;

  a = bn_load(ap);
  b = bn_load(bp);
  p = bn_load(pp);
  r = dbn_load(rr);
  // relax ABI contraints
  rp2 = rp;
  c = expm(r,p,a,b);
  bn_store(rp2, c);
}


inline fn toEC()
{
  stack u64[nlimbs] a b r p;
  stack u64[2 * nlimbs] z;
  reg u64 x;
  reg bool _cf;  

  r = expm(z,a,b,p);
  r = mulm(z,a,b,p);
  r = rsample(a);
}
