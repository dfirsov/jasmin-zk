/* This file is autogenerated by constants.py */

/* Loads the modulus. This function has the property (expressed as an Easycrypt lemma):

   op p : int = 32317006071311007300338913926423828248817941241140239112842009751400741706634354222619689417363569347117901737909704191754605873209195028853758986185622153212175412514901774520270235796078236248884246189477587641105928646099411723245426622522193230540919037680524235519125679715870117001058055877651038861847280257976054903569732561526167081339361799541336476559160368317896729073178384589680639671900977202194168647225871031411336429319536193471636533209717077448227988588565369208645296636077250268955505928362751121174096972998068410554359584866583291642136218231078990999448652468262416972035911852507045361090559.
   lemma bn_set_p_correct: phoare [ bn_set_p : true ==> W64xN.valR res = p ] = 1%r.
*/
inline fn bn_set_p(stack u64[32] p) -> stack u64[32] {
  p[0] = -1;
  p[1] = 1545454141666273896;
  p[2] = 1572361106993317136;
  p[3] = 4149303432552213221;
  p[4] = -2437630513363020008;
  p[5] = -5348765695191788855;
  p[6] = -7266694737971142001;
  p[7] = -2045066149513755133;
  p[8] = 3643515754058796603;
  p[9] = -1048094028264365700;
  p[10] = 7425368496004700164;
  p[11] = -7001644933747141011;
  p[12] = 2045464732017971899;
  p[13] = -8978667873486262890;
  p[14] = 7572309818504171359;
  p[15] = -7432548837780761702;
  p[16] = -4467433697928036603;
  p[17] = 5271575865889938237;
  p[18] = -5863928532294754330;
  p[19] = -1281155366686974043;
  p[20] = 864511594326308845;
  p[21] = -843225458941629077;
  p[22] = -1979976941098336570;
  p[23] = 5755940542857986629;
  p[24] = 3470879405153129527;
  p[25] = -1183011067081899237;
  p[26] = 5857503583518590173;
  p[27] = 147421033984662306;
  p[28] = 2955010104097229940;
  p[29] = -4267615245585081135;
  p[30] = -3958705157555305932;
  p[31] = -1;
  return p;
}

/* Loads the order of the generator. This function has the property (expressed as an Easycrypt lemma):

   op q : int = 16158503035655503650169456963211914124408970620570119556421004875700370853317177111309844708681784673558950868954852095877302936604597514426879493092811076606087706257450887260135117898039118124442123094738793820552964323049705861622713311261096615270459518840262117759562839857935058500529027938825519430923640128988027451784866280763083540669680899770668238279580184158948364536589192294840319835950488601097084323612935515705668214659768096735818266604858538724113994294282684604322648318038625134477752964181375560587048486499034205277179792433291645821068109115539495499724326234131208486017955926253522680545279.
   lemma bn_set_q_correct: phoare [ bn_set_q : true ==> W64xN.valR res = q ] = 1%r.
*/
inline fn bn_set_q(stack u64[32] q) -> stack u64[32] {
  q[0] = 9223372036854775807;
  q[1] = 772727070833136948;
  q[2] = -8437191483358117240;
  q[3] = 2074651716276106610;
  q[4] = -1218815256681510004;
  q[5] = -2674382847595894428;
  q[6] = -3633347368985571001;
  q[7] = -1022533074756877567;
  q[8] = 1821757877029398301;
  q[9] = 8699325022722592958;
  q[10] = -5510687788852425726;
  q[11] = -3500822466873570506;
  q[12] = 1022732366008985949;
  q[13] = -4489333936743131445;
  q[14] = 3786154909252085679;
  q[15] = -3716274418890380851;
  q[16] = -2233716848964018302;
  q[17] = 2635787932944969118;
  q[18] = -2931964266147377165;
  q[19] = -640577683343487022;
  q[20] = -8791116239691621386;
  q[21] = 8801759307383961269;
  q[22] = -989988470549168285;
  q[23] = -6345401765425782494;
  q[24] = -7487932334278211045;
  q[25] = -591505533540949619;
  q[26] = 2928751791759295086;
  q[27] = 73710516992331153;
  q[28] = -7745866984806160838;
  q[29] = 7089564414062235240;
  q[30] = -1979352578777652966;
  q[31] = 9223372036854775807;
  return q;
}

/* Loads the generator. This function has the property (expressed as an Easycrypt lemma):

   op g : int = 2.
   lemma bn_set_g_correct: phoare [ bn_set_g : true ==> W64xN.valR res = g ] = 1%r.
*/
inline fn bn_set_g(stack u64[32] g) -> stack u64[32] {
  g[0] = 2;
  g[1] = 0;
  g[2] = 0;
  g[3] = 0;
  g[4] = 0;
  g[5] = 0;
  g[6] = 0;
  g[7] = 0;
  g[8] = 0;
  g[9] = 0;
  g[10] = 0;
  g[11] = 0;
  g[12] = 0;
  g[13] = 0;
  g[14] = 0;
  g[15] = 0;
  g[16] = 0;
  g[17] = 0;
  g[18] = 0;
  g[19] = 0;
  g[20] = 0;
  g[21] = 0;
  g[22] = 0;
  g[23] = 0;
  g[24] = 0;
  g[25] = 0;
  g[26] = 0;
  g[27] = 0;
  g[28] = 0;
  g[29] = 0;
  g[30] = 0;
  g[31] = 0;
  return g;
}

/* Loads the barret parameter for p. This function has the property (expressed as an Easycrypt lemma):

   op bp : int = 32317006071311007301090839450916075672074637894498330470309491614874605269258845429066617750438611497217172998255766216223761011478474532650974905473458381524348224983452534238842699055706528839316900073176359409123413739445397952234623184300460154670470987008412185029124584489601900670931121854398190604800292822877845957165654247519063010445688374293905515743037557007239230573090162415731314434935337651887720640264611889321352234483385341531370885728478742938129783934088697644527630028295616871380503535956364143710134154492766231832072494607343336005619107670188720508364918065676485338559326165037076233303652.
   lemma bn_set_bp_correct: phoare [ bn_set_bp : true ==> W64x2N.valR res = bp ] = 1%r.
*/
inline fn bn_set_bp(stack u64[64] bp) -> stack u64[64] {
  bp[0] = 5147934117528057444;
  bp[1] = -8039224964009096681;
  bp[2] = -1863204891041622530;
  bp[3] = 1492440688257385106;
  bp[4] = -8379911280692632352;
  bp[5] = -7107373076680378936;
  bp[6] = 4675869585930362320;
  bp[7] = -1528481643224157819;
  bp[8] = -4718237254951853228;
  bp[9] = -4673837108105975521;
  bp[10] = 3156528908874584491;
  bp[11] = 1231154113365505725;
  bp[12] = -728192829851793692;
  bp[13] = -1778872171323819163;
  bp[14] = 8054682061035653787;
  bp[15] = -6301365806082590070;
  bp[16] = -4271537129510651734;
  bp[17] = 1872412834642272634;
  bp[18] = -8152872253725130441;
  bp[19] = 8837694422794646872;
  bp[20] = -8735433557206333231;
  bp[21] = 6633261091277544380;
  bp[22] = 6086011487233213371;
  bp[23] = -3978415866257682790;
  bp[24] = -3134452869786675955;
  bp[25] = -7599265780564753949;
  bp[26] = -5622185901781746713;
  bp[27] = 7264247675481435729;
  bp[28] = -6423523570662984175;
  bp[29] = 5117160642964443543;
  bp[30] = 3958705157555305931;
  bp[31] = 0;
  bp[32] = 1;
  bp[33] = 0;
  bp[34] = 0;
  bp[35] = 0;
  bp[36] = 0;
  bp[37] = 0;
  bp[38] = 0;
  bp[39] = 0;
  bp[40] = 0;
  bp[41] = 0;
  bp[42] = 0;
  bp[43] = 0;
  bp[44] = 0;
  bp[45] = 0;
  bp[46] = 0;
  bp[47] = 0;
  bp[48] = 0;
  bp[49] = 0;
  bp[50] = 0;
  bp[51] = 0;
  bp[52] = 0;
  bp[53] = 0;
  bp[54] = 0;
  bp[55] = 0;
  bp[56] = 0;
  bp[57] = 0;
  bp[58] = 0;
  bp[59] = 0;
  bp[60] = 0;
  bp[61] = 0;
  bp[62] = 0;
  bp[63] = 0;
  return bp;
}

/* Loads the barret parameter for q. This function has the property (expressed as an Easycrypt lemma):

   op bq : int = 64634012142622014602181678901832151344149275788996660940618983229749210538517690858133235500877222994434345996511532432447522022956949065301949810946916763048696449966905068477685398111413057678633800146352718818246827478890795904469246368600920309340941974016824370058249168979203801341862243708796381209600585645755691914331308495038126020891376748587811031486075114014478461146180324831462628869870675303775441280529223778642704468966770683062741771456957485876259567868177395289055260056591233742761007071912728287420268308985532463664144989214686672011238215340377441016729836131352970677118652330074152466607306.
   lemma bn_set_bq_correct: phoare [ bn_set_bq : true ==> W64x2N.valR res = bq ] = 1%r.
*/
inline fn bn_set_bq(stack u64[64] bq) -> stack u64[64] {
  bq[0] = -8150875838653436726;
  bq[1] = 2368294145691358254;
  bq[2] = -3726409782083245059;
  bq[3] = 2984881376514770213;
  bq[4] = 1686921512324286912;
  bq[5] = 4231997920348793745;
  bq[6] = -9095004901848826975;
  bq[7] = -3056963286448315638;
  bq[8] = 9010269563805845161;
  bq[9] = 9099069857497600575;
  bq[10] = 6313057817749168983;
  bq[11] = 2462308226731011450;
  bq[12] = -1456385659703587384;
  bq[13] = -3557744342647638325;
  bq[14] = -2337379951638244041;
  bq[15] = 5844012461544371476;
  bq[16] = -8543074259021303467;
  bq[17] = 3744825669284545269;
  bq[18] = 2140999566259290734;
  bq[19] = -771355228120257871;
  bq[20] = 975876959296885154;
  bq[21] = -5180221891154462855;
  bq[22] = -6274721099243124874;
  bq[23] = -7956831732515365580;
  bq[24] = -6268905739573351909;
  bq[25] = 3248212512580043719;
  bq[26] = 7202372270146058191;
  bq[27] = -3918248722746680157;
  bq[28] = 5599696932383583266;
  bq[29] = -8212422787780664529;
  bq[30] = 7917410315110611862;
  bq[31] = 0;
  bq[32] = 2;
  bq[33] = 0;
  bq[34] = 0;
  bq[35] = 0;
  bq[36] = 0;
  bq[37] = 0;
  bq[38] = 0;
  bq[39] = 0;
  bq[40] = 0;
  bq[41] = 0;
  bq[42] = 0;
  bq[43] = 0;
  bq[44] = 0;
  bq[45] = 0;
  bq[46] = 0;
  bq[47] = 0;
  bq[48] = 0;
  bq[49] = 0;
  bq[50] = 0;
  bq[51] = 0;
  bq[52] = 0;
  bq[53] = 0;
  bq[54] = 0;
  bq[55] = 0;
  bq[56] = 0;
  bq[57] = 0;
  bq[58] = 0;
  bq[59] = 0;
  bq[60] = 0;
  bq[61] = 0;
  bq[62] = 0;
  bq[63] = 0;
  return bq;
}
