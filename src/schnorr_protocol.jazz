require "bn_generic.jazz"
require "dbn_generic.jazz"
require "bn_generic_extra.jazz"

require "constants.jazz"

// only needed to analyze leakage-freeness
inline fn commitment_indexed() -> (inline int, stack u64[nlimbs], stack u64[nlimbs]){
  stack u64[nlimbs]  secret_power commitment group_generator group_order exp_order;
  stack u64[dnlimbs] barrett_parameter;
  inline int i;

  exp_order         = bn_set_q(exp_order);
  group_order       = bn_set_p(group_order);
  group_generator   = bn_set_g(group_generator);
  barrett_parameter = bn_set_bp(barrett_parameter);

  i, secret_power = bn_rsample(exp_order);
  commitment = bn_expm(barrett_parameter,group_order,group_generator,secret_power);  
  return (i, commitment, secret_power);
}


inline fn commitment() -> (stack u64[nlimbs], stack u64[nlimbs]){
  stack u64[nlimbs]  secret_power commitment group_generator group_order exp_order;
  stack u64[dnlimbs] barrett_parameter;

  exp_order         = bn_set_q(exp_order);
  group_order       = bn_set_p(group_order);
  group_generator   = bn_set_g(group_generator);
  barrett_parameter = bn_set_bp(barrett_parameter);

  _, secret_power = bn_rsample(exp_order);
  commitment = bn_expm(barrett_parameter,group_order,group_generator,secret_power);  
  return (commitment, secret_power);
}


inline fn response(stack u64[nlimbs] witness0 secret_power challenge) 
 -> (stack u64[nlimbs]){
  stack u64[dnlimbs] exp_barrett;
  stack u64[nlimbs]  exp_order response product;

  exp_order   = bn_set_q(exp_order);
  exp_barrett = bn_set_bq(exp_barrett);

  challenge    = bn_breduce_small(exp_barrett, challenge, exp_order);
  secret_power = bn_breduce_small(exp_barrett, secret_power, exp_order);
  witness0     = bn_breduce_small(exp_barrett, witness0, exp_order);

  product  = bn_mulm(exp_barrett, exp_order, challenge, witness0);
  response = bn_addm(exp_order, secret_power, product);
 
  return response;
}



inline fn challenge_indexed() -> (inline int, stack u64[nlimbs]){
  stack u64[nlimbs] challenge exp_order;
  inline int i;
  exp_order = bn_set_q(exp_order);  
  i, challenge = bn_rsample(exp_order);
  return (i, challenge);
}


inline fn challenge() -> stack u64[nlimbs]{
  stack u64[nlimbs] challenge exp_order;
  exp_order = bn_set_q(exp_order);  
  _, challenge = bn_rsample(exp_order);
  return challenge;
}




inline fn verify(stack u64[nlimbs] statement commitment challenge response) 
 -> (stack u64){
  stack u64[dnlimbs] exp_barrett group_barrett;
  stack u64[nlimbs] tmp v1 v2 v3 v4 exp_order group_order group_generator;
  reg u64 result1 result2;

  exp_order         = bn_set_q(exp_order);
  exp_barrett       = bn_set_bq(exp_barrett);
  group_order       = bn_set_p(group_order);
  group_barrett     = bn_set_bp(group_barrett);
  group_generator   = bn_set_g(group_generator);

  statement  = bn_breduce_small(group_barrett, statement, group_order);
  commitment = bn_breduce_small(group_barrett, commitment, group_order);
  challenge  = bn_breduce_small(exp_barrett, challenge, exp_order);
  response   = bn_breduce_small(exp_barrett, response, exp_order);
  
  tmp = bn_expm(group_barrett, group_order, statement, challenge); 
  v1  = bn_mulm(group_barrett, group_order, commitment, tmp);
  v2  = bn_expm(group_barrett, group_order, group_generator, response);
  result1 = bn_eq(v1,v2);

  v3 = bn_expm(group_barrett, group_order, statement, exp_order);  
  v4 = bn_set1(v4);

  result2 = bn_eq(v3,v4);

  result1 &= result2;

  return result1;
}



export fn __commitment(reg u64 commitment_p random_power_p) 
{ 
  reg u64 commitment_p2 random_power_p2;
  stack u64[nlimbs] commitment random_power;

  commitment_p2   = commitment_p;   // relax ABI contraints
  random_power_p2 = random_power_p; // relax ABI contraints

  commitment, random_power = commitment();

  bn_store(commitment_p2, commitment);
  bn_store(random_power_p2, random_power);
}


export fn __response(reg u64 random_power_p challenge_p response_p) 
{ 
  reg u64 response_p2;
  stack u64[nlimbs] commitment random_power witness challenge response;

  response_p2 = response_p;   // relax ABI contraints 

  witness      = bn_set_ex_w(witness);
  random_power = bn_load(random_power_p);
  challenge    = bn_load(challenge_p);

  response = response(witness,random_power,challenge);

  bn_store(response_p2, response);
}


export fn __verify(reg u64 commitment_p challenge_p response_p result_p) 
{ 
  reg u64 result_p2;
  stack u64[nlimbs] statement commitment challenge response;
  reg u64 result;
  
  result_p2 = result_p; // relax ABI contraints 

  statement  = bn_set_ex_s(statement);
  commitment = bn_load(commitment_p);
  challenge  = bn_load(challenge_p);
  response   = bn_load(response_p);

  result = verify(statement,commitment,challenge,response);

  [result_p2] = result; 
}


export fn __challenge(reg u64 challenge_p) 
{ 
  reg u64 challenge_p2;
  stack u64[nlimbs] challenge;

  challenge_p2 = challenge_p;   // relax ABI contraints

  challenge = challenge();

  bn_store(challenge_p2, challenge);
}


