require "uniform_distr.jazz"
require "ring_ops.jazz"

/* constant assigning */
inline fn bn_set_gg(stack u64[nlimbs] a) -> stack u64[nlimbs] {
  inline int i;
  a[0] = 1;
  for i = 1 to nlimbs {
    a[i] = 1;
  }
  return a;
}


/* constant assigning */
inline fn bn_set_bf(stack u64[dnlimbs] a) -> stack u64[dnlimbs] {
  inline int i;
  a[0] = 1;
  for i = 1 to dnlimbs {
    a[i] = 1;
  }
  return a;
}


/* equality check */
inline fn bn_eq(stack u64[nlimbs] a b) -> stack u64 {
  stack u64 result;
  reg u64 c1 c2;
  inline int i;
  result = 0;
  for i = 0 to nlimbs {
    c1 = a[i];
    c2 = b[i];
    c1 ^= c2;
    result |= c1 ;
  }
  return result;
}


/* constant assigning */
inline fn bn_set_eo(stack u64[nlimbs] a) -> stack u64[nlimbs] {
  inline int i;
  a[0] = 1;
  for i = 1 to nlimbs {
    a[i] = 1;
  }
  return a;
}


/* constant assigning */
inline fn bn_set_eb(stack u64[dnlimbs] a) -> stack u64[dnlimbs] {
  inline int i;
  a[0] = 1;
  for i = 1 to dnlimbs {
    a[i] = 1;
  }
  return a;
}


/* constant assigning */
inline fn bn_set_go(stack u64[nlimbs] a) -> stack u64[nlimbs] {
  inline int i;
  a[0] = 1;
  for i = 1 to nlimbs {
    a[i] = 1;
  }
  return a;
}


inline fn commitment() -> (stack u64[nlimbs], stack u64[nlimbs]){
  stack u64[nlimbs]  secret_power commitment group_generator group_order exp_order;
  stack u64[dnlimbs] barrett_parameter;

  exp_order         = bn_set_eo(exp_order);
  group_order       = bn_set_go(group_order);
  group_generator   = bn_set_gg(group_generator);
  barrett_parameter = bn_set_bf(barrett_parameter);

  secret_power = usample(exp_order);
  commitment = expm(barrett_parameter,group_order,group_generator,secret_power);  
  return (commitment, secret_power);
}


inline fn response(stack u64[nlimbs] witness0 secret_power challenge) 
 -> (stack u64[nlimbs]){
  stack u64[dnlimbs] exp_barrett;
  stack u64[nlimbs]  exp_order response product;

  exp_order   = bn_set_eo(exp_order);
  exp_barrett = bn_set_eb(exp_barrett);

  challenge    = bn_breduce_small(challenge, exp_barrett, exp_order);
  secret_power = bn_breduce_small(secret_power, exp_barrett, exp_order);
  witness0     = bn_breduce_small(witness0, exp_barrett, exp_order);

  product  = mulm(exp_barrett, exp_order, challenge, witness0);
  response = addm(exp_order, secret_power, product);
 
  return response;
}


inline fn challenge() -> stack u64[nlimbs]{
  stack u64[nlimbs] challenge exp_order;
  exp_order = bn_set_eo(exp_order);  
  challenge = usample(exp_order);
  return challenge;
}


inline fn verify(stack u64[nlimbs] statement commitment challenge response) 
 -> (stack u64){
  stack u64[dnlimbs] exp_barrett group_barrett;
  stack u64[nlimbs]  tmp v1 v2 exp_order group_order group_generator;
  stack u64 result;

  exp_order         = bn_set_eo(exp_order);
  exp_barrett       = bn_set_eb(exp_barrett);
  group_order       = bn_set_go(group_order);
  group_barrett     = bn_set_bf(group_barrett);
  group_generator   = bn_set_gg(group_generator);

  statement  = bn_breduce_small(statement,  group_barrett, group_order);
  commitment = bn_breduce_small(commitment, group_barrett, group_order);
  challenge  = bn_breduce_small(challenge,  exp_barrett,   exp_order);
  response   = bn_breduce_small(response,   exp_barrett,   exp_order);
  
  tmp = expm(group_barrett, group_order, statement, challenge);
  v1  = mulm(group_barrett, group_order, commitment, tmp);
  v2  = expm(group_barrett, group_order, group_generator, response);
  result = bn_eq(v1,v2);
  
  return result;
}



export fn __commitment(reg u64 commitment_p) 
{ 
  reg u64 commitment_p2;
  stack u64[nlimbs] commitment rp;

  // relax ABI contraints
  commitment_p2 = commitment_p;
  commitment, rp = commitment();
  bn_store(commitment_p2, commitment);
}


export fn __response(reg u64 random_power_p challenge_p witness_p response_p) 
{ 
  reg u64 response_p2;
  stack u64[nlimbs] commitment random_power witness challenge response;


  random_power = bn_load(random_power_p);
  challenge = bn_load(challenge_p);
  witness = bn_load(witness_p);

  // relax ABI contraints
  response_p2 = response_p;
  response = response(witness,random_power,challenge);
  bn_store(response_p2, commitment);
}


export fn __verify(reg u64 statement_p commitment_p challenge_p response_p result_p) 
{ 
  reg u64 result_p2;
  stack u64[nlimbs] statement commitment challenge response;
  stack u64 result;


  statement = bn_load(statement_p);
  commitment = bn_load(commitment_p);
  challenge = bn_load(challenge_p);
  response = bn_load(response_p);

  // relax ABI contraints
  result_p2 = result_p;
  result = verify(statement,commitment,challenge,response);
  [result_p2] = result;

}


export fn __challenge(reg u64 challenge_p) 
{ 
  reg u64 challenge_p2;
  stack u64[nlimbs] challenge;

  // relax ABI contraints
  challenge_p2 = challenge_p;
  challenge = challenge();
  bn_store(challenge_p2, challenge);
}


