

inline fn swap(reg u64 x1 x2 toswap)
  ->
  reg u64,
  reg u64
{
 reg u64 x1r x2r t mask;

 ?{}, mask = #set0();
 mask -= toswap;

  x2r = x2;
  x1r = x1;
  t = x2r;
  t ^= x1r;
  t &= mask;
  x1r ^= t;
  x2r ^= t;
  x1 = x1r;
  x2 = x2r;
  
 return x1, x2;
}



inline fn swapb(reg u64 x1 x2, reg bool myflag)
  ->
  reg u64,
  reg u64
{
 reg u64 x1r x2r t mask toswap;

 toswap = 0;
 toswap = 1 if myflag;
 ?{}, mask = #set0();
 mask -= toswap;

  x2r = x2;
  x1r = x1;
  t = x2r;
  t ^= x1r;
  t &= mask;
  x1r ^= t;
  x2r ^= t;
  x1 = x1r;
  x2 = x2r;
  
 return x1, x2;
}

export fn __swap( reg u64 x1 x2 toswap ) -> (reg u64, reg u64) { 
  reg u64 _x1, _x2, _toswap, _x1r, _x2r;
  _x1 = x1;
  _x2 = x2;
  _toswap = toswap;
  _x1r, _x2r = swap(_x1, _x2, _toswap);
  return _x1r, _x2r;
}
