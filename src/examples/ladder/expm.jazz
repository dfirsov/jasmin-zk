require "swap.jazz"
require "ithbit.jazz"
require "arith.jazz"

param int bsize = 63;



inline fn expm(reg u64 m x n) -> (reg u64, reg u64)
{
  reg u64 ctr x1 x2 x3 x4 bit d p par t1 t2 cbit lbit q;
  ctr = bsize;

  d = __ith_bit64(n,ctr);
  x1 = 1;
  x2 = 1;
  x3 = x;
  x4 = mulm(m,x,x);
  p = d;
  (x1,x3) = swap(x1,x3,d);
  (x2,x4) = swap(x2,x4,d);

while(ctr > 0){
   lbit = ctr;
   ctr = ctr - 1;

   t1 =  __ith_bit64(n,lbit);
   t2 =  __ith_bit64(n,ctr);
   p = d; 
   q = d;
   d = d | t2;
   par = t1 ^ t2;
   (x1,x2) = swap(x1,x2,par);
   x1 = mulm(m,x1,x2);
   x2 = mulm(m,x2,x2);
   q |= t2;
   cbit = q ^ p;
   (x1,x3) = swap(x1,x3,cbit);
   (x2,x4) = swap(x2,x4,cbit); 

} 

  par = __ith_bit64(n,0);
  (x1,x2) = swap(x2,x1,par); 
  return (x1,x2);
}


export fn __expm( reg u64 p a b ) -> reg u64 { 
  reg u64 _p, _a, _b, _r, r;
  _a = a;
  _b = b;
  _p = p;
  _r = expm(_p, _a, _b);
  r = _r;
  return r;
}



fn main() -> (reg u64, reg u64)  {
  reg u64 p x1 x2 r1 r2; 
  x1 = 4;
  x2 = 5;
  p = 13;
  r1, r2 = expm(p,x1,x2);
  return r1, r2;
}





exec main()