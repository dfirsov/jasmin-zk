require "swap.jazz"
require "ithbit.jazz"
require "arith.jazz"



inline fn parity(reg u64 n) -> (reg u64)
{
  reg u64 cbit pbit toswap ctr r;

  ctr = 4;
  cbit = 0;
  pbit = 1;
  r = 0;

while{
    ctr -= 1;
    cbit = __ith_bit64(n,ctr);
    r ^= (cbit ^ pbit);
    pbit = cbit;
  } (ctr  > 0)

  return r;
}

inline fn expm(reg u64  p x n) -> (reg u64, reg u64)
{
  reg u64 ctr x1 x2 bit toswap x1r x2r par;

  ctr = 4;  
  x1 = x;
  x2 = mulm(p,x1,x1);

  x1r = x1;
  x2r = x2;
  toswap = 1;

while{
    ctr -= 1;
    bit = __ith_bit64(n,ctr);
    toswap ^= bit;
    x1r, x2r = swap(x1r,x2r,toswap);
    x1r = mulm(p,x1r,x2r);
    x2r = mulm(p,x2r,x2r);
    toswap = bit;

  } (ctr  > 0)

  par = parity(n);
  (x1r,x2r) = swap(x1r,x2r,par);

  return (x1r, x2r);
}




/*
fn main3() -> (reg u64)  {
  reg u64 x r; 
  x = 23;
  r = parity(x);
  return r;
}
*/

fn main2() -> (reg u64)  {
  reg u64 p x1 x2 r1; 
  x1 = 5;
  x2 = 25;
  p = 13;
  r1 = expm_naive(p,x1,x2);
  return r1;
}


fn main() -> (reg u64, reg u64)  {
  reg u64 p x1 x2 r1 r2; 
  x1 = 5;
  x2 = 25;
  p = 13;
  r1, r2 = expm(p,x1,x2);
  return r1, r2;
}


exec main()
exec main2()
