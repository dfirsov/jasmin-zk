require "ithbit.jazz"
require "swap.jazz"
require "Fp_w64x4.jazz"


inline fn mulm_ladder(stack u64[nlimbs] m x n) -> (stack u64[nlimbs]){
  reg u64 ctr bit d p par t1 t2 cbit lbit q;
  stack u64[nlimbs] x1 x2 x3 x4;
  ctr = nlimbs * 64 - 1;
  x1[0] = 0; x1[1] = 0; x1[2] = 0; x1[3] = 0;
  x2[0] = 0; x2[1] = 0; x2[2] = 0; x2[3] = 0;
  d = ith_bit(n,ctr);

  x3 = x;
  x4 = addm(m,x,x);
  p = d;
  (x1,x3) = swapr(x1,x3,d);
  (x2,x4) = swapr(x2,x4,d);

while(ctr > 0){
   lbit = ctr;
   ctr = ctr - 1;

   t1 =  ith_bit(n,lbit);
   t2 =  ith_bit(n,ctr);
   p = d; 
   q = d;
   d = d | t2;
   par = t1 ^ t2;
   (x1,x2) = swapr(x1,x2,par);
   x1 = addm(m,x1,x2);
   x2 = addm(m,x2,x2);
   q |= t2;
   cbit = q ^ p;
   (x1,x3) = swapr(x1,x3,cbit);
   (x2,x4) = swapr(x2,x4,cbit); 

} 
  par = ith_bit(n,0);
  (x1,x2) = swapr(x2,x1,par);
  
  return x1;
}




inline fn toEC2()
{
  stack u64[nlimbs] a b r;
  reg u64 x;
  reg bool _cf;
  
  /* normalized versions */
  r = mulm_ladder(a,a,b);


}
