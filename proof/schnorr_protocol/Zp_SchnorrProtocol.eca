require import Int IntDiv.
require import Real.
require import Distr.
require import List.
require import StdOrder.
import Ring.IntID IntOrder.

require (*--*) Subtype.

require Abstract_SchnorrProtocol.
require ZModPStar.

require ZModP.
clone import ZModP.ZModField as Zp.

clone ZModPStar as ZPS with op p <- Zp.p,
                            theory ZpF <= Zp.


import ZPS.


op q : int.
axiom q_prime : prime q.

op g : ZPS.zmod.
axiom g_q_assumption: (ZModpField.exp g q) = Zp.one.

op challenges_list_zp : int list.
axiom list_elems x : x \in challenges_list_zp => 0 <= x < q.
axiom challenges_list_zp_uniq : uniq challenges_list_zp.
axiom challenges_list_zp_size : 0 < size challenges_list_zp.

lemma g_unit : unit g.  
apply (Zp.ComRing.unitP g (ZModpField.exp g (q-1))).
have ->: (ZModpField.exp g (q - 1)) * g = (ZModpField.exp g (q - 1)) * (ZModpField.exp g 1). smt(@ZModpField).
have ->: (ZModpField.exp g (q - 1)) * (ZModpField.exp g 1) = (ZModpField.exp g ((q - 1) + 1)).
rewrite - ZModpField.exprD. 
apply (ZModpField.unitrX_neq0 g q). smt(q_prime). smt(g_q_assumption @ZModpField).
simplify. auto.
simplify. apply g_q_assumption. qed.

lemma lll' (z : zmod) : unit z => forall x, 0 <= x 
  => Zps.(^) (Sub.insubd z)  x = Sub.insubd (ZModpField.exp z x). 
move => z_unit. apply intind. progress. 
smt(@Zps @ZModpField). 
progress. 
rewrite ZModpField.exprS. auto.
rewrite Zps.expS. rewrite H0.
have ->: (Sub.insubd (z * (ZModpField.exp z i)))
 = Sub.Lift.lift2 Zp.( * ) (Sub.insubd z)  (Sub.insubd (ZModpField.exp z i)).
  smt(@Sub @Zp).
smt().
qed.

clone import Abstract_SchnorrProtocol as LSP with
  op g <- Sub.insubd g,
  op q <- q,
  op challenges_list <- map EG.inzmod challenges_list_zp,
  theory CG <- ZPS.Zps
proof g_is_generator, q_prime.
realize g_is_generator.  rewrite lll'. apply g_unit. smt(q_prime).
rewrite g_q_assumption. auto. qed.
realize q_prime.  apply q_prime. qed.
 

type statement   = zmod.           (* statement  *)
type witness     = int.            (* witness    *)
type commitment  = zmod.           (* commitment *)
type response    = int.            (* response   *)
type challenge   = int.            (* challenge  *)
type secret      = int.



op completeness_relationG (s:statement) (w:witness) = (ZModpField.exp g w) = s.
op zk_relationG (s : statement) (w : witness) = 0 <= w < q /\ (ZModpField.exp g w) = s.



module type ZKProverG = {
  proc commitment() : commitment * secret
  proc response(w : witness, r : secret, c : challenge) : response
}.

module type ZKVerifierG = {
  proc challenge() : challenge
  proc verify(s : statement, z : commitment, c : challenge, t : response) :
    bool
}.

module SchnorrProver : ZKProverG = {
  proc commitment() : commitment * secret = {
    var r : secret;
    r <$ [0..q-1]; 
    return (ZModpField.exp g r, r);
  }
  proc response(w: witness, r:secret, c: challenge) : response = {
    c <- (c %% q \in challenges_list_zp) ? c %% q : head witness challenges_list_zp;
    return (r + c * w) %% q;
  }
}.

module SchnorrVerifier : ZKVerifierG = {
  proc challenge() : challenge = {
    var c;
    c <$ duniform challenges_list_zp;
    return c;
  }
  proc verify(s: statement, z: commitment, c: challenge, t: response) : bool = {
    return ((ZModpField.exp g t) = (ZModpField.exp s c) * z) /\ (ZModpField.exp s q) = Zp.one;
  }
}.


module CompletenessG(P : ZKProverG, V : ZKVerifierG) = {
  proc main(s:statement, w:witness) = {
    var z, c, r,t,v;
    (z,r) <@ P.commitment();
    c <@ V.challenge();
    t <@ P.response(w,r,c);
    v <@ V.verify(s,z,c,t);
    return v;
  }
}.


module type MaliciousVerifierG = {
  proc challenge(s : statement, z : commitment) : challenge
  proc summitup(r : response) : summary
}.

module type ZKDistinguisherG  = {
  proc guess(statement : statement, witness : witness, summary : summary) : bool 
}.


module type RewMaliciousVerifierG = {
  proc challenge(s : statement, z : commitment) : challenge
  proc summitup(r : response) : summary
  proc getState() : sbits 
  proc setState(b : sbits) : unit 
}.


module type SimulatorG(V0 : RewMaliciousVerifierG)  = {
  proc simulate(statement : statement) : summary
}.


module ZKRealG(P : ZKProverG, V : MaliciousVerifierG, D : ZKDistinguisherG) = {
  proc run(statement : statement, witness : witness) : bool = {
    var commit, secret,  challenge, response, summary, guess;    
    (commit, secret) <@ P.commitment();
    challenge <@ V.challenge(statement, commit);
    response <@ P.response(witness, secret, challenge);
    summary <@ V.summitup(response);
    guess <@ D.guess(statement, witness, summary);
    return guess;
  }
}.


module ZKIdealG(S : SimulatorG, V0 : RewMaliciousVerifierG,
               D0 : ZKDistinguisherG) = {
  proc run(statement : statement, witness : witness) : bool = {
    var summary : summary;
    var guess : bool;
    summary <@ S(V0).simulate(statement);
    guess <@ D0.guess(statement, witness, summary);
    return guess;
  }
}.


(* Extractability  *)
import Rew.

(* Remove secret from commitment and response *)
module type ZKMaliciousProverG = {
  proc commitment() : commitment
  proc response(c : challenge) : response
}.


module type ZKRewindableMaliciousProverG = {
  proc commitment() : commitment
  proc response(c : challenge) : response
  proc getState() : sbits 
  proc setState(b : sbits) : unit 
}.

module SoundnessG(P : ZKMaliciousProverG, V : ZKVerifierG) = {
  proc run(s:statement) = {
    var z, c,t,v;
    z <@ P.commitment();
    c <@ V.challenge();
    t <@ P.response(c);
    v <@ V.verify(s,z,c,t);
    return v;
  }
}.

module type ExtractorG(P: ZKRewindableMaliciousProverG) = {
  proc extract(statement: statement): witness
}.
