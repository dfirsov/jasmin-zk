require import AllCore Distr DInterval List Int IntDiv.

from Jasmin require import JModel JBigNum.

require import W64_SchnorrProtocol.
require import BigNum_spec.
import W64xN. 


require W64_Zp_SchnorrCorrespondance.
clone import W64_Zp_SchnorrCorrespondance as Ind.

require Zp_SchnorrCompleteness.
clone Zp_SchnorrCompleteness as ZSC with 
   theory Zp_SchnorrCorrespondanceProofs.Zp_SchnorrInstance <- ZPSP
proof*.


section Completeness.

local lemma completeness_same ss ww &m:
 Pr[ ZPSP.CompletenessG(ZPSP.SchnorrProver,ZPSP.SchnorrVerifier).main(ZpC.inzmod (W64xN.valR ss) , (W64xN.valR ww))@&m : res]
 = Pr[CompletenessJ(JProver,JVerifier).main(ss,ww)@&m : res].
proof.
byequiv.
proc.
call verify_eq.
call response_eq.
call challenge_eq.
call commitment_eq.
simplify. skip. progress.
smt. smt. rewrite  H. 
have v : valR result_R.`1 < ZpC.p. rewrite - H. smt(@ZpC).
have : valR result_R.`1 %% ZpC.p = valR result_R.`1. smt (@IntDiv @ZpC).
smt().
rewrite - H2.
smt.
smt.
auto. auto.
qed.

import MLC. 
import ZpC.

local lemma qqqq x : 0 <= x => (g ^ x %% ZpC.p) <> 0.
move => xnonzero.
case ((g ^ x %% ZpC.p = 0)).
move => q. simplify.
  have : unit (ZModpField.exp (inzmod g) x ).
  smt.
rewrite /unit. elim. 
move => y. 
have  : Sub.val (y * (ZModpField.exp (inzmod g) x) )= ((Sub.val y) * (Sub.val (ZModpField.exp (inzmod g) x)) %% ZpC.p). 
smt.
have ->: (Sub.val ((ZModpField.exp (inzmod g) x))) = ((Sub.val (inzmod g)) ^ x) %% ZpC.p.
 have -> : (ZModpField.exp (inzmod g) x) = (inzmod g) ^^ x. auto.
rewrite  - exps. assumption.
timeout 10. smt.
move => eq1 eq2.
have o1 : (Sub.val y) * ((Sub.val (inzmod g)) ^ x %% ZpC.p) %% ZpC.p = 0.
  have -> : (Sub.val (inzmod g)) = g. smt(@Sub g_less_p). rewrite q. simplify. auto.
have o2 : (Sub.val y) * ((Sub.val (inzmod g)) ^ x %% ZpC.p) %% ZpC.p = 1.
 rewrite - eq1. rewrite eq2. rewrite  /ZpC.one. 
rewrite inzpKK. smt(@IntDiv p_less_modulusR).
smt().
auto.
qed.


lemma completenessJ ss ww &m: completeness_relationJ ss ww =>
 Pr[CompletenessJ(JProver,JVerifier).main(ss,ww)@&m : res] = 1%r.
move => compl_rel.
rewrite - completeness_same.
apply  (ZSC.completenessG (ZpC.inzmod (W64xN.valR ss)) (W64xN.valR ww) &m).
rewrite - (completness_compat ss ww). auto. 
qed.

end section Completeness.
