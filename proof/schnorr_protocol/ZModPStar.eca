require import AllCore.
require  ZModP Group.

op p : int.
axiom ge2_p: 2 <= p.

clone ZModP.ZModRing as ZpF with
  op p <= p
proof ge2_p.
realize ge2_p. apply ge2_p. qed.

type zmod = ZpF.zmod.

  
clone Subtype as Sub with
  type T <- zmod,
  op P = ZpF.unit
proof*. 
realize inhabited. exists ZpF.one. rewrite /P. rewrite /unit. exists ZpF.one. smt(@ZpF). qed.

type zmods = Sub.sT.


  
clone Group.ComGroup as Zps with
  type group <= zmods,
  op e <= Sub.insubd ZpF.one,
  op ( * ) <= Sub.Lift.lift2 ZpF.( * ),
  op inv <= Sub.Lift.lift1 ZpF.inv
proof*.
realize mulcC. rewrite /lift2. smt(@ZpF @Sub). qed.
realize mul1c. rewrite /lift2 /left_id. progress.  smt(@ZpF @Sub). qed.
realize mulcA. rewrite /associative /lift2. progress. smt(@ZpF @Sub). qed.
realize mulVc. rewrite /left_inverse /lift2 /lift1. progress. smt(@ZpF @Sub). qed.


