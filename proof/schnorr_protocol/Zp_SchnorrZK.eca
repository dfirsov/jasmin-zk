require import Int IntDiv Real Distr List StdOrder.
import Ring.IntID IntOrder.

require Zp_Abstract_SchnorrCorrespondance.
clone import Zp_Abstract_SchnorrCorrespondance as Zp_SchnorrCorrespondanceProofs.
import Zp_SchnorrInstance Zp ZPS LSP Rew.

clone import SchnorrZeroKnowledge as SZK.

section.


declare module V <: RewMaliciousVerifierG {-HP, -ZK.Hyb.Count, -ZK.Hyb.HybOrcl}.
declare module D <: ZKDistinguisherG{-HP, -ZK.Hyb.Count, -ZK.Hyb.HybOrcl}.

declare axiom V_summitup_ll : islossless V.summitup. 
declare axiom V_challenge_ll : islossless V.challenge.
declare axiom D_guess_ll : islossless D.guess.
declare axiom D_guess_prop : equiv[ D.guess ~ D.guess : ={glob V, arg} ==> ={res} ].


(* rewindability assumption *)
declare axiom rewindable_V_plus :
        (exists (f : glob V -> sbits),
         injective f /\
         (forall &m, Pr[ V.getState() @ &m : (glob V) = ((glob V){m})
                                          /\ res = f ((glob V){m} ) ] = 1%r) /\
         (forall &m b (x: glob V), b = f x =>
           Pr[V.setState(b) @ &m : glob V = x] = 1%r) /\
         islossless V.setState).



op zk_relationG (s : statement) (w : witness) = 
   0 <= w < q /\ ZModpField.exp g w = s.


lemma zk_relationG_implies_unit_s s w : 
  zk_relationG s w => unit s.
move => zk_rel.
elim zk_rel. elim.
move => _ _ eq.
rewrite - eq.
apply exp_lemma6. apply g_unit.
qed.


lemma zk_relations_compatible (s : statement) (w : witness) : 
  zk_relationG s w => zk_relation (Sub.insubd s) (EG.inzmod w).
progress. rewrite /zk_relation /IsDL.
elim H. elim. progress.
have ->: ZModpField.exp g w = ZModpField.exp g (w %% q).
rewrite - (exp_mod g w q). apply g_q_assumption. auto.
rewrite - lll.  apply g_unit.
rewrite /(^^).
rewrite EG.inzmodK.
auto.
qed.    


module V'(V : RewMaliciousVerifierG) : RewMaliciousVerifier = {
  proc challenge(s : dl_stat, d :  dl_com) : dl_chal = {
      var c;
      c <@ V.challenge(Sub.val s, Sub.val d);
      return (EG.inzmod c);
  }
  
  proc summitup(s : dl_stat, d : dl_resp) : summary  = {
      var c;
      c <@ V.summitup(EG.asint d);
      return c;    
  }
  proc getState = V.getState
  proc setState = V.setState
}.

module D'(D : ZKDistinguisherG) : ZKDistinguisher = {
  proc guess(statement : dl_stat, witness : dl_wit, summary : summary) : bool = {
    var r;
    r <@ D.guess(Sub.val statement, EG.asint witness, summary);
    return r;
  }
}.


module Sim1G(V : RewMaliciousVerifierG) = {
  module S = Sim1(V'(V))
  proc run(Ny : statement) : bool * summary = {
    var r;
    r <@ S.run(Sub.insubd Ny);        
    return r;
  }
}.

module SimNG(V0 : RewMaliciousVerifierG) = {
  module A = Sim1G(V0)
  
  proc simulate(statement : statement) : summary = {
    var c : int;
    var r : bool * summary;
    
    c <- 1;
    r <- (false, witness);
    while (c <= N /\ ! r.`1){
      r <@ A.run(statement);
      c <- c + 1;
    }    
    return r.`2;
  }
}.



local lemma zk_sim1_same ss:
 equiv [ Sim1G(V).run ~ Sim1(V'(V)).run :
   arg{1} = ss 
   /\ arg{2} = Sub.insubd ss
   /\  ={glob V} ==> ={res, glob V}].
proc. 
inline*. 
wp.
seq 15 14 : (={result,b,b',vstat,glob V}).
wp. call (_:true). simplify.
wp. simplify.
call (_:true). wp. 
rnd.  rnd.  wp. call (_:true). wp. 
skip. progress.
if. auto.
call (_:true). skip. progress.
skip.  auto.
qed.


local lemma zk_ideal_same &m stat wit : zk_relationG stat wit =>
  Pr[ZKIdeal(OSS.SimN(Sim1), V'(V), D'(D)).run(Sub.insubd stat, EG.inzmod wit)@&m : res]
  = Pr[ZKIdealG(SimNG, V, D).run(stat, wit)@&m : res].
move => wit_normal.
byequiv. proc.
inline D'(D).guess.
wp.
call D_guess_prop.
wp. 
inline OSS.SimN(Sim1, V'(V)).simulate.
inline SimNG(V).simulate.
wp. sp. simplify.
while (={c, glob V} /\ r0{1} = r{2} /\ statement1{1} = Sub.insubd statement0{2} /\ statement0{2} = stat).
wp.
symmetry.
call (zk_sim1_same stat).
skip. progress.
skip. progress. smt().
rewrite Sub.insubdK /P. 
apply (zk_relationG_implies_unit_s statement{2} witness{2});auto.
auto.
rewrite EG.inzmodK. smt(@IntDiv).
auto.
auto.
qed.

local lemma zk_real_same &m ss ww: zk_relationG ss ww =>
 Pr[ZKRealG(SchnorrProver, V,D).run(ss,ww)@&m : res]
 = Pr[ZKReal(HP, V'(V),D'(D)).run(Sub.insubd ss,EG.inzmod ww)@&m : res].
move => zk_rel_ss_ww.
byequiv. proc.
inline D'(D).guess. 
wp. call D_guess_prop.
simplify. wp.
inline V'(V).summitup. wp. 
call (_:true).
simplify.
wp.  
call response_eq. simplify.
inline V'(V).challenge. wp.  
call (_:true).
wp.  
call (commitment_eq (Sub.insubd ss) (EG.inzmod ww)).  
skip. progress. 
rewrite Sub.insubdK /P. 
apply (zk_relationG_implies_unit_s statement{1} witness{1}). auto. auto. 
smt().
smt(@EG).
smt(@EG).
smt(@EG).
rewrite EG.inzmodK. 
smt(@IntDiv).
auto.
auto.
qed.

lemma zero_knowledgeG (stat : statement) (wit : witness) &m:
  zk_relationG stat wit =>
  let ideal_prob = Pr[ZKIdealG(SimNG, V, D).run(stat, wit)@&m : res] in
  let real_prob = Pr[ZKRealG(SchnorrProver,V,D).run(stat,wit)@&m : res] in
 `|ideal_prob - real_prob| <= 2%r * ((1%r - (1%r / (size challenges_list_zp)%r)) ^ N).
move => zk_rel_stat_wit. simplify.
rewrite zk_real_same. auto.
rewrite - zk_ideal_same. auto.
have ->: (size challenges_list_zp) = (size (map EG.inzmod challenges_list_zp)). smt(@List).
apply (schnorr_statistical_zk (V'(V)) (D'(D)) _ _ _ _ _  (Sub.insubd stat) 
 (EG.inzmod wit) &m).
proc. call V_summitup_ll. auto.
proc. call V_challenge_ll. auto.
proc. call D_guess_ll. auto.
proc. call D_guess_prop. skip. auto. simplify.
apply rewindable_V_plus.
apply zk_relations_compatible.
auto.
qed.


end section.
