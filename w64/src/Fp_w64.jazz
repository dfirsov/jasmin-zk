require "ithbit.jazz"
require "swap.jazz"

param int bsize = 63;



/* @requires: is_prime(p)
   @requires: 0 <= a,b < p
   @ensures: res = (a+b)%p */
inline fn addm( reg u64 p a b ) -> reg u64 {
  reg bool _cf;
  reg u64 k1, k2, x;
  k1 = 0;
  k2 = 0;
  _cf, x = a + b;
  k1 = p if _cf;
  _cf, x = x - p;
  k2 = p if _cf;
  x += k2;
  x -= k1;
  return x;
}

/* @requires: is_prime(p)
   @requires: 0 <= a,b < p
   @ensures: res = (a-b)%p */
inline fn subm( reg u64 p a b ) -> reg u64 {
  reg bool _cf;
  reg u64 k, x;
  k = 0;
  _cf, x = a - b;
  k = p if _cf;
  x += k;
  return x;
}

/* @requires: is_prime(p)
   @requires: 0 <= a,b < p
   @ensures: res = (a*b)%p */
inline fn mulm( reg u64 p a b ) -> reg u64 {
  reg u64 ax, bx, mh, ml, q, r, x;
  ax = a;
  bx = b;
  _, _, _, _, _, mh, ml = #MUL( ax, bx );
  _, _, _, _, _, q, r = #DIV( mh, ml, p );
  x = r;
  return x;
}

/* @requires: is_prime(p)
   @requires: 0 <= a,b < p
   @ensures: res = (a^b)%p */
inline fn expm(reg u64 m x n) -> (reg u64)
{
  reg u64 ctr x1 x2 x3 x4 bit d p par t1 t2 cbit lbit q;
  ctr = bsize;

  d = ith_bit(n,ctr);
  x1 = 1;
  x2 = 1;
  x3 = x;
  x4 = mulm(m,x,x);
  p = d;
  (x1,x3) = swapr(x1,x3,d);
  (x2,x4) = swapr(x2,x4,d);

while(ctr > 0){
   lbit = ctr;
   ctr = ctr - 1;

   t1 =  ith_bit(n,lbit);
   t2 =  ith_bit(n,ctr);
   p = d; 
   q = d;
   d = d | t2;
   par = t1 ^ t2;
   (x1,x2) = swapr(x1,x2,par);
   x1 = mulm(m,x1,x2);
   x2 = mulm(m,x2,x2);
   q |= t2;
   cbit = q ^ p;
   (x1,x3) = swapr(x1,x3,cbit);
   (x2,x4) = swapr(x2,x4,cbit); 

} 

  par = ith_bit(n,0);
  (x1,x2) = swapr(x2,x1,par); 
  return x1;
}


export fn __addm( reg u64 p a b ) -> reg u64 { 
  reg u64 _p, _a, _b, _r, r;
  _a = a;
  _b = b;
  _p = p;
  _r = addm(_p, _a, _b);
  r = _r;
  return r;
}

export fn __subm( reg u64 p a b ) -> reg u64 { 
  reg u64 _p, _a, _b, _r, r;
  _a = a;
  _b = b;
  _p = p;
  _r = subm(_p, _a, _b);
  r = _r;
  return r;
}

export fn __mulm( reg u64 p a b ) -> reg u64 { 
  reg u64 _p, _a, _b, _r, r;
  _a = a;
  _b = b;
  _p = p;
  _r = mulm(_p, _a, _b);
  r = _r;
  return r;
}


export fn __expm( reg u64 p a b ) -> reg u64 { 
  reg u64 _p, _a, _b, _r, r;
  _a = a;
  _b = b;
  _p = p;
  _r = expm(_p, _a, _b);
  r = _r;
  return r;
}



inline fn toEC()
{
  reg u64 p a b r;
  /* normalized versions */
  r = addm(p, a, b);
  r = subm(p, a, b);
  r = mulm(p, a, b);
  r = expm(p, a, b);
}
